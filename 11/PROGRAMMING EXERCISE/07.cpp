// 복소수는 실수부와 허수부를 가진다.
// 복소수를 포시하는 한 가지 방법은 (3.0, 4.0)이다.
// 여기서 3.0은 실수부이고, 4.0은 허서부이다.
// a = (a, Bi)이고 c = (C, Di)라고 가정하면, 다음과 같은 복소수 연산이 성립한다.
/*
* 덧셈 : a + c = (A + C, (B + D)i)
* 뺄셈 : a - c = (A - C, (B - D)i)
* 곱셈 : a × c = (A × C - B × D, (A × D + B × C)i)
* 곱셈(x는 실수) : x × c = (X × C, x × Di)
* 공액 : ~a = (A, -Bi)
*/
// 다음 프로그램이 정확한 결과를 내도록 복소수 클래스를 정의하라.
/*
#include <iostream>
using namespace std;
#include "complex0.h"   // complex.h와 혼동을 피하기 위해
int main()
{
    complax a(3.0, 4.0);    // (3, 4i)로 초기화
    complex c;
    cout << "하나의 복소수를 입력하십시오(끝내려면 q) : \n";
    while (cin >> c)
    {
        cout << "c = " << c << '\n';
        cout << "공액복소수 = " << ~c << '\n';
        cout << "a + c = " << a + c << '\n';
        cout << "a - c = " << a - c << '\n';
        cout << "a * c = " << a * c << '\n';
        cout << "2 * c = " << 2 * c << '\n';
        cout << "하나의 복소수를 입력하십시오(끝내려면 q) : \n";
    }
    cout << "프로그램을 종료합니다.\n";
        return 0;
}
*/
// 이때 <<와 >> 연산자를 오버로딩해야 한다. 
// 대부분의 C++ 시스템은 이미 complex.h 헤더 파일을 통해 복소수를 지원하고 있으므로(예문에서는 보다 없은 범위에서 지원하고 있다), 혼동을 파하기 위해 complex0.h를 사용하라.
// 확실한 경우에는 언제든디 const를 사용하라.
/* 다음은 프로그램의 실행 예이다. (complex0.h, complex0.cpp, usecmplx.cpp)
하나의 복소수를 입력하십시오(끝내려면 q) : 
실수부 : 10
허수부 : 12
c = (10,12i)
공액복소수 = (10,-12i)
a = (3,4i)
a + c = (13,16i)
a - c = (-7,-8i)
a * c = (-18,76i)
2 * c = (20, 24i)
하나의 복소수를 입력하십시오(끝내려면 q) :
실수부 : q
프로그램을 중료합니다.
*/
// cin >> c는 오버로딩을 통해서 실수부와 허수부의 사용자 입력을 안내한다.