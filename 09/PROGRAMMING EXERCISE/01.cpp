// 다음과 같은 헤더 파일이 있다.
/*
// golf.h -- pe9-1.cpp를 위해 헤더 파일

const int Len = 40;
struct golf
{
    char fullname[Len];
    int handicap;
};

// 비대화식 버전:
// 이 함수는 매개변수로 전달된 값들을 사용하여
// golf 구조체를 제공된 이름과 핸디캡으로 설정한다
void setgolf(golf & g, const char * name, int bc);

// 대화식 버전:
// 이 함수는 사용자에게 이름과 핸디캡을 묻는다
// g의 멤버들을 입력된 값으로 설정한다
// 이름이 입력되면 1을 리턴하고, 이름이 빈 문자열이면 0을 리턴한다
int setgolf(golf & g);

// 이 함수는 handicap을 새로운 값으로 설정한다
void handicap(golf & g, int hc);

// 이 함수는 golf 구조체의 내용을 출력한다
void showgolf(const golf & g);
*/
// setgolf()가 오버로드 된다는 사실에 주목하라.
// setgolf()의 첫 번째 버전은 다음과 같이 사용될 것이다.
/*
golf ann;
setgolf(ann, "Ann Birdfree", 24);
*/
// 이 함수 호출은 ann 구조체에 저장될 정보를 제공한다.
// setgolf()의 두 번재 버전은 다음과 같이 사용될 것이다.
/*
golf andy();
setgolf(andy);
*/
// 이 함수 호출은 사용자에게 이름과 핸디캡을 입력해 줄 것을 요구하여, 그들을 andy 구조체에 저장한다.
// 이 함수는 첫 번째 버전을 내부적으로 사용할 수 있다. (그러나 그럴 필요는 없다.)
// 이 헤더 파일을 기초로 하여 하나의 다중 파일 프로그램을 작성하라.
// golf.cpp라는 파일은, 헤더에 있는 원형들과 일치하는 적당한 함수 정의를 제고해야 한다.
// 두 번재 파일은 main()을 포함해야 하고, 원형이 제공된 함수들의 모든 기능을 구현해야 한다.
// 예를 들어, 하나의 루프를 사용하여 golf 구조체의 배열에 입력을 요구하고, 배열이 가득 차거나 사용자가 골퍼의 이름에 빈 문자열을 입력하면 루프를 종료한다.
// main() 함수는 원형이 제공된 함수만 사요하여 golf 구조체에 엑세스해야 한다.