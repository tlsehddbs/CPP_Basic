// 간단한 리스트를 다음과 같이 서술할 수 있다.
/*
* 리스트에 특정 데이터형의 항목을 0개 또는 그 이상을 저장할 수 있다. 
* 비어 있는 리스트를 생성할 수 있다.
* 리스트에 항목들을 추가할 수 있다.
* 리스트가 비어 있는지 결정할 수 있다.
* 리스트가 가득 차 있는지 결정할 수 있다.
* 리스트의 각 항목에 대해 몇 가지 원하는 동작을 수행할 수 있다.
*/
// 보다시피, 이 리스트는 매우 간단하다.
// 이 리스트는 중간 삽입이나 중간 삭제를 허용하지 않는다.
// 이 추상화 데이터형을 나타내는 List 클래스를 설계하라.
// 클래스 선언ㅇ을 가진 list.h 헤더 파일과, 클래스 메서드 구형을 가진 list.cpp 파일을 제공해야 한다.
// 또한 그 클래스 설계를 이용하는 짧은 프로그램을 작성해야 한다.
// 리스트 사양을 간단하게 유지하는 주된 이유는, 이 프로그래밍 연습을 단순화하기 위해서이다.
// 리스트를 배열로 구현할 수도 있고, 데이터형에 익숙하다면 링크드 리스트로 구현할 수도 있다. 그러나 public 인터페이스는 리스트를 무엇으로 구현하든 상관 없어야 한다.
// 즉, public 인터페이스는 배열 인덱스, 노드를 지시하는 포인터 등을 가지면 안 된다. 
// public 인터페이스는 리스트를 생성하고, 리스트에 새 항목을 추가하는 등의 일반적인 개념으로 표현되어야 한다.
// 리스트의 각 항목들에 접근하여 우너하는 동작을 수행하는 일반적인 방법은, 함수 포인터를 매개변수로 취하는 다음과같은 함수를 사용하는 것이다.
/*
void visit(void (*pf)(Item *))
*/
// 여기서 pf는 Item 매개변수에 대한 참조를 취하는 (멤버 함수가 아닌) 어떤 함수를 지시한다.
// Item은 그 리스트에 있는 항목들의 데이터형이다.
// 그리고 visit() 함수는 리스트에 있는 각 항목에 이 함수를 적용한다.
// 일반적인 지침으로 Stack 클래스를 사용할 수 있다. (list.h, list.cpp, uselist.cpp)